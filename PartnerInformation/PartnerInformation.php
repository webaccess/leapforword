<?php
G::LoadClass("plugin");

if(!empty ($_POST['s_val'])&& empty ($_POST['d_val']) )
{

require_once("PartnerInformation/classes/class.dashletPartnerInformation.php");
$call = new dashletPartnerInformation();
$call->render($_POST['s_val']);

}

if(!empty ($_POST['d_val'])){

require_once ("PartnerInformation/classes/class.dashletPartnerInformation.php");
$call = new dashletPartnerInformation();
$call->renderDetails($_POST['d_val']);

}

class PartnerInformationPlugin extends PMPlugin
{
  private $dashletsUids;
  
  public function PartnerInformationPlugin($sNamespace, $sFilename = null)
  {
    $res = parent::PMPlugin($sNamespace, $sFilename);
    $this->sFriendlyName = "PartnerInformation Plugin";
    $this->sDescription  = "Autogenerated plugin for class PartnerInformation";
    $this->sPluginFolder = "PartnerInformation";
    $this->sSetupPage    = "setup";
    $this->iVersion      = 1;
    //$this->iPMVersion    = 2425;
    $this->aWorkspaces   = null;
    //$this->aWorkspaces = array("os");
    
    
    $this->dashletsUids = array(
      array("DAS_UID" => "82908626858a2c95031c5c0005533878",
            "DAS_CLASS" => "dashletPartnerInformation",
            "DAS_TITLE" => "Dashlet PartnerInformation",
            "DAS_DESCRIPTION" => "Dashlet PartnerInformation",
            "DAS_VERSION" => "1.0",
            "DAS_CREATE_DATE" => date("Y-m-d"),
            "DAS_UPDATE_DATE" => date("Y-m-d"))
    );
    
    
    return $res;
  }

  public function setup()
  {
    
    $this->registerDashlets();
  }

  public function install()
  {
  }
  
  public function enable()
  {
    $this->dashletInsert();
  }

  public function disable()
  {
    $this->dashletDelete();
  }
  
  public function dashletInsert()
  {
    require_once ("classes/model/Dashlet.php");
    
    $connection = Propel::getConnection(DashletPeer::DATABASE_NAME);
    
    foreach ($this->dashletsUids as $dashletData) {
      $dashlet = new Dashlet();
      
      if (is_null($dashlet->load($dashletData["DAS_UID"]))) {
        $dashlet->fromArray($dashletData, BasePeer::TYPE_FIELDNAME);
        $connection->begin();
        $dashlet->save();
        $connection->commit();
      }
    }
  }
  
  public function dashletDelete()
  {
    require_once ("classes/model/Dashlet.php");
    
    foreach ($this->dashletsUids as $dashletData) {
      $criteria = new Criteria("workflow");
      $criteria->add(DashletPeer::DAS_UID, $dashletData["DAS_UID"]);
      DashletPeer::doDelete($criteria);
    }
  }
}

$oPluginRegistry = &PMPluginRegistry::getSingleton();
$oPluginRegistry->registerPlugin("PartnerInformation", __FILE__);
